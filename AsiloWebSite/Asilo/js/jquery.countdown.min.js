(function($) {
    "use strict";

    function castToDateString(value) {
        if (value instanceof Date) return value;
        if (String(value).match(datePattern)) {
            if (String(value).match(/^[0-9]*$/)) value = Number(value);
            if (String(value).match(/\-/)) value = String(value).replace(/\-/g, "/");
            return new Date(value);
        }
        throw new Error("Couldn't cast `" + value + "` to a date object.");
    }

    function escapeRegex(string) {
        return string.toString().replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
    }

    function replaceTemplatePlaceholders(format) {
        return function(string) {
            var placeholders = string.match(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi);
            if (placeholders) {
                for (var i = 0; i < placeholders.length; ++i) {
                    var placeholder = placeholders[i].match(/%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/),
                        regex = new RegExp(escapeRegex(placeholder[0])),
                        modifier = placeholder[1] || "",
                        modifiers = placeholder[3] || "",
                        value = null;
                    placeholder = placeholder[2];
                    if (formats.hasOwnProperty(placeholder)) {
                        value = formats[placeholder];
                        value = Number(string[value]);
                    }
                    if (value !== null) {
                        if (modifier === "!") value = resolveModifier(modifiers, value);
                        if (modifier === "" && value < 10) value = "0" + value.toString();
                        string = string.replace(regex, value.toString());
                    }
                }
            }
            return string = string.replace(/%%/, "%");
        };
    }

    function resolveModifier(modifiers, value) {
        var singular = "s",
            plural = "";
        if (modifiers) {
            modifiers = modifiers.replace(/(:|;|\s)/gi, "").split(/,/);
            if (modifiers.length === 1) singular = modifiers[0];
            else {
                plural = modifiers[0];
                singular = modifiers[1];
            }
        }
        return Math.abs(value) > 1 ? singular : plural;
    }

    var instances = [],
        datePattern = [],
        formats = {
            Y: "years",
            m: "months",
            n: "daysToMonth",
            d: "daysToWeek",
            w: "weeks",
            W: "weeksToMonth",
            H: "hours",
            M: "minutes",
            S: "seconds",
            D: "totalDays",
            I: "totalHours",
            N: "totalMinutes",
            T: "totalSeconds"
        },
        Countdown = function(el, finalDate, callback) {
            this.el = el;
            this.$el = $(el);
            this.interval = null;
            this.offset = {};
            this.options = $.extend({}, defaultOptions);
            this.instanceNumber = instances.length;
            instances.push(this);
            this.$el.data("countdown-instance", this.instanceNumber);
            if (callback) {
                if (typeof callback === "function") {
                    this.$el.on("update.countdown", callback);
                    this.$el.on("stoped.countdown", callback);
                    this.$el.on("finish.countdown", callback);
                } else {
                    this.options = $.extend({}, defaultOptions, callback);
                }
            }
            this.setFinalDate(finalDate);
            if (this.options.defer === false) this.start();
        };

    Countdown.prototype = {
        start: function() {
            if (this.interval !== null) clearInterval(this.interval);
            var self = this;
            this.update();
            this.interval = setInterval(function() {
                self.update.call(self);
            }, this.options.precision);
        },
        stop: function() {
            clearInterval(this.interval);
            this.interval = null;
            this.dispatchEvent("stoped");
        },
        toggle: function() {
            this.interval ? this.stop() : this.start();
        },
        pause: function() {
            this.stop();
        },
        resume: function() {
            this.start();
        },
        remove: function() {
            this.stop.call(this);
            instances[this.instanceNumber] = null;
            delete this.$el.data().countdownInstance;
        },
        setFinalDate: function(finalDate) {
            this.finalDate = castToDateString(finalDate);
        },
        update: function() {
            if (this.$el.closest("html").length === 0) return this.remove();
            var eventBindingsExist = typeof $._data !== "undefined" && $._data(this.el, "events"),
                now = new Date(),
                time = (this.finalDate.getTime() - now.getTime()) / 1000,
                self = this;
        
            time = !this.options.elapse && time < 0 ? 0 : Math.abs(time);
        
            var secondsLeft = time,
                days = Math.floor(secondsLeft / (60 * 60 * 24)),
                daysToWeek = Math.floor(secondsLeft / (60 * 60 * 24)) % 7,
                daysToMonth = Math.floor(secondsLeft / (60 * 60 * 24) % 30.4368),
                weeks = Math.floor(secondsLeft / (60 * 60 * 24 * 7)),
                weeksToMonth = Math.floor(secondsLeft / (60 * 60 * 24 * 7) % 4.34524),
                months = Math.floor(secondsLeft / (60 * 60 * 24 * 30.4368)),
                years = Math.abs(this.finalDate.getFullYear() - now.getFullYear()),
                totalDays = Math.floor(secondsLeft / (60 * 60 * 24)),
                totalHours = Math.floor(secondsLeft / (60 * 60)),
                totalMinutes = Math.floor(secondsLeft / 60),
                totalSeconds = Math.floor(secondsLeft);
        
            this.offset = {
                seconds: totalSeconds % 60,
                minutes: totalMinutes % 60,
                hours: totalHours % 24,
                days: totalDays % 7,
                daysToWeek: daysToWeek,
                daysToMonth: daysToMonth,
                weeks: weeks,
                weeksToMonth: weeksToMonth,
                months: months,
                years: years,
                totalDays: totalDays,
                totalHours: totalHours,
                totalMinutes: totalMinutes,
                totalSeconds: totalSeconds
            };
        
            if (!this.options.elapse && time <= 0) {
                this.stop();
                this.dispatchEvent("finish");
            } else {
                if (eventBindingsExist) this.dispatchEvent("update");
                if (time <= 0) this.stop();
            }
        
        },
        dispatchEvent: function(eventName) {
            var event = $.Event(eventName + ".countdown");
            event.finalDate = this.finalDate;
            event.elapsed = this.elapsed;
            event.offset = $.extend({}, this.offset);
            event.strftime = replaceTemplatePlaceholders(this.offset);
            this.$el.trigger(event);
        }
    };

    $.fn.countdown = function() {
        
        var args = Array.prototype.slice.call(arguments, 0);
        return this.each(function() {
            var instanceNumber = $(this).data("countdown-instance");
            if (typeof instanceNumber !== "undefined") {
                var instance = instances[instanceNumber],
                    method = args[0];
                if (Countdown.prototype.hasOwnProperty(method)) {
                    instance[method].apply(instance, args.slice(1));
                } else if (method === null || typeof method === "object") {
                    instance.setFinalDate.apply(instance, args);
                    instance.start();
                } else {
                    $.error("Method %s does not exist on jQuery.countdown".replace(/\%s/gi, method));
                }
            } else {
                new Countdown(this, args[0], args[1]);
            }
        });
    };
})(jQuery);
